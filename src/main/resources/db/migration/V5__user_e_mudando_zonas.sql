CREATE TABLE usuario
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email      VARCHAR(255),
    name       VARCHAR(255),
    password   VARCHAR(255),
    avatar_url VARCHAR(255),
    score      INTEGER                                 NOT NULL,
    CONSTRAINT pk_usuario PRIMARY KEY (id)
);

ALTER TABLE usuario
    ADD CONSTRAINT uc_usuario_email UNIQUE (email);

ALTER TABLE zona
    ADD CONSTRAINT uq_zona_patio_tipo UNIQUE (patio_id, tipo_zona);

ALTER TABLE patio
    ALTER COLUMN quantidade_vagas SET NOT NULL;

ALTER TABLE zona
    ALTER COLUMN tipo_zona SET NOT NULL;



-- V5: corrigir unicidade de zona e garantir integridade

-- 1) Remover qualquer UNIQUE antiga baseada só em 'nome'
ALTER TABLE zona DROP CONSTRAINT IF EXISTS uc_zona_nome;
ALTER TABLE zona DROP CONSTRAINT IF EXISTS uk_zona_nome;

-- (defensivo) derruba quaisquer UNIQUE que envolvam SOMENTE a coluna 'nome'
DO $$
DECLARE
cons RECORD;
BEGIN
FOR cons IN
SELECT c.conname
FROM pg_constraint c
         JOIN pg_class t ON t.oid = c.conrelid
WHERE t.relname = 'zona'
  AND c.contype = 'u'
  AND array_length(c.conkey, 1) = 1
  AND (
          SELECT a.attname
          FROM pg_attribute a
          WHERE a.attrelid = c.conrelid
            AND a.attnum   = c.conkey[1]
      ) = 'nome'
    LOOP
    EXECUTE format('ALTER TABLE zona DROP CONSTRAINT %I', cons.conname);
END LOOP;
END
$$ LANGUAGE plpgsql;

-- 2) Garantir a UNIQUE correta por pátio + tipo_zona (idempotente)
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'uq_zona_patio_tipo'
  ) THEN
ALTER TABLE zona
    ADD CONSTRAINT uq_zona_patio_tipo UNIQUE (patio_id, tipo_zona);
END IF;
END
$$ LANGUAGE plpgsql;

-- 3) Garantir NOT NULL e domínio do enum (A/B)
ALTER TABLE zona
    ALTER COLUMN tipo_zona SET NOT NULL;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'ck_zona_tipo_zona'
  ) THEN
ALTER TABLE zona
    ADD CONSTRAINT ck_zona_tipo_zona CHECK (tipo_zona IN ('A','B'));
END IF;
END
$$ LANGUAGE plpgsql;

-- 4) FK para patio (com cascade na deleção) e índice de apoio
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'fk_zona_patio'
  ) THEN
ALTER TABLE zona
    ADD CONSTRAINT fk_zona_patio
        FOREIGN KEY (patio_id) REFERENCES patio(id) ON DELETE CASCADE;
END IF;
END
$$ LANGUAGE plpgsql;

CREATE INDEX IF NOT EXISTS idx_zona_patio ON zona(patio_id);
